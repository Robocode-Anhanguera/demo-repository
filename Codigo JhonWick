package sample;

import java.awt.*;
import java.awt.geom.*;
import java.util.*;

import robocode.*;
import robocode.util.*;

public class jhonwickV1 extends AdvancedRobot {
	final static double FIRE_POWER=2;
	final static double FIRE_SPEED=20-FIRE_POWER*3;
	final static double BULLET_DAMAGE=10;
	final static boolean PAINT_MOVEMENT=true;
	final static boolean PAINT_GUN=false;
	
	static double enemyEnergy;
	
	ArrayList<jhonwickV1.MovementWave> moveWaves=new ArrayList<jhonwickV1.MovementWave>();
	ArrayList<jhonwickV1.GunWave> gunWaves=new ArrayList<jhonwickV1.GunWave>();
	
	static double gunAngles[]=new double[16];
	public void run(){
		enemyEnergy=100;
		
		setAdjustGunForRobotTurn(true);
		setAdjustRadarForGunTurn(true);
		setColors(Color.white,Color.gray,Color.red);
		
		while(true){
			if(getRadarTurnRemainingRadians()==0){
				setTurnRadarRightRadians(Double.POSITIVE_INFINITY);
			}
			paint();
			execute();
		}
	}

	public void onScannedRobot(ScannedRobotEvent e){
		double absBearing=e.getBearingRadians()+getHeadingRadians();
		
		double energyChange=(enemyEnergy-(enemyEnergy=e.getEnergy()));
		MovementWave w;
		if(energyChange<=3&&energyChange>=0.1){
			logMovementWave(e,energyChange);
		}
	
		chooseDirection(project(new Point2D.Double(getX(),getY()),e.getDistance(),absBearing));
		
		if(getGunHeat()==0){
			logFiringWave(e);
		}

		checkFiringWaves(project(new Point2D.Double(getX(),getY()),e.getDistance(),absBearing));
		
		setTurnGunRightRadians(Utils.normalRelativeAngle(absBearing-getGunHeadingRadians())
				+gunAngles[8+(int)(e.getVelocity()*Math.sin(e.getHeadingRadians()-absBearing))]);
		setFire(FIRE_POWER);
		
		setTurnRadarRightRadians(Utils.normalRelativeAngle(absBearing-getRadarHeadingRadians())*2);
	}
 
	public void onBulletHit(BulletHitEvent e){
		enemyEnergy-=BULLET_DAMAGE;
	}

	public void logMovementWave(ScannedRobotEvent e,double energyChange){
		double absBearing=e.getBearingRadians()+getHeadingRadians();
		MovementWave w=new MovementWave();
		w.origin=project(new Point2D.Double(getX(),getY()),e.getDistance(),absBearing);
		w.speed=20-3*energyChange;
		w.startTime=getTime();
		w.angle=Utils.normalRelativeAngle(absBearing+Math.PI);
		w.latVel=(getVelocity()*Math.sin(getHeadingRadians()-w.angle))/w.speed;
		moveWaves.add(w);
	}

	public void chooseDirection(Point2D.Double enemyLocation){
		MovementWave w;
	
		double bestRating=Double.POSITIVE_INFINITY;
		for(double moveAngle=0;moveAngle<Math.PI*2;moveAngle+=Math.PI/16D){
			double rating=0;
			
			Point2D.Double movePoint=project(new Point2D.Double(getX(),getY()),36,moveAngle);
			
	
			for(int i=0;i<moveWaves.size();i++){
				w=moveWaves.get(i);
				
				if(new Point2D.Double(getX(),getY()).distance(w.origin)<(getTime()-w.startTime)*w.speed+w.speed){
					moveWaves.remove(w);
				}
				else{
				
					rating+=1D/Math.pow(movePoint.distance(project(w.origin,movePoint.distance(w.origin),w.angle)),2);
					rating+=1D/Math.pow(movePoint.distance(project(w.origin,movePoint.distance(w.origin),w.angle+w.latVel)),2);
				}
			}

			if(moveWaves.size()==0){
				rating=1D/Math.pow(movePoint.distance(enemyLocation),2);
			}

			if(rating<bestRating&&new Rectangle2D.Double(50,50,getBattleFieldWidth()-100,getBattleFieldHeight()-100).contains(movePoint)){
				bestRating=rating;
			
				int pointDir;
				setAhead(1000*(pointDir=(Math.abs(moveAngle-getHeadingRadians())<Math.PI/2?1:-1)));
				setTurnRightRadians(Utils.normalRelativeAngle(moveAngle+(pointDir==-1?Math.PI:0)-getHeadingRadians()));
			}
		}
	}
	
	
	public void logFiringWave(ScannedRobotEvent e){
		GunWave w=new GunWave();
		w.absBearing=e.getBearingRadians()+getHeadingRadians();
		w.speed=FIRE_SPEED;
		w.origin=new Point2D.Double(getX(),getY());
		w.velSeg=(int)(e.getVelocity()*Math.sin(e.getHeadingRadians()-w.absBearing));
		w.startTime=getTime();
		gunWaves.add(w);
	}
	
	public void checkFiringWaves(Point2D.Double ePos){
		GunWave w;
		for(int i=0;i<gunWaves.size();i++){
			w=gunWaves.get(i);
			if((getTime()-w.startTime)*w.speed>=w.origin.distance(ePos)){
				gunAngles[w.velSeg+8]=Utils.normalRelativeAngle(Utils.normalAbsoluteAngle(Math.atan2(ePos.x-w.origin.x, ePos.y-w.origin.y))-w.absBearing);
				gunWaves.remove(w);
			}
		}
	}

	public Point2D.Double project(Point2D.Double origin,double dist,double angle){
		return new Point2D.Double(origin.x+dist*Math.sin(angle),origin.y+dist*Math.cos(angle));
	}
	
	public void paint(){
		Graphics g=getGraphics();
		double radius;
		
	
		if(PAINT_MOVEMENT){
			for(int i=0;i<moveWaves.size();i++){
				MovementWave w=moveWaves.get(i);
				g.setColor(Color.blue);
				radius=(getTime()-w.startTime)*w.speed+w.speed;
				g.drawOval((int)(w.origin.x-radius),(int)(w.origin.y-radius),(int)radius*2,(int)radius*2);
				Point2D.Double hotBullet=project(w.origin,radius,w.angle);
				Point2D.Double latBullet=project(w.origin,radius,w.angle+w.latVel);
				g.setColor(Color.red);
				g.fillOval((int)hotBullet.x-3,(int)hotBullet.y-3,6,6);
				g.fillOval((int)latBullet.x-3,(int)latBullet.y-3,6,6);
			}
		}
	
		if(PAINT_GUN){
			for(int i=0;i<gunWaves.size();i++){
				GunWave w=gunWaves.get(i);
				g.setColor(Color.blue);
				radius=(getTime()-w.startTime)*w.speed;
				g.drawOval((int)(w.origin.x-radius),(int)(w.origin.y-radius),(int)radius*2,(int)radius*2);
			}
		}
		
		
	}

	public static class MovementWave{
		Point2D.Double origin;
		double startTime;
		double speed;
		double angle;
		double latVel;
	}
	
	public class GunWave{
		double speed;
		Point2D.Double origin;
		int velSeg;
		double absBearing;
		double startTime;
	}
	
}
